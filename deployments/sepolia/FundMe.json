{
  "address": "0x07Db19DB6016745f1822964C1988B15431C7E173",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa374d2b1a3c5163260f052b1f62ec79a802e265111cea8c0f4beb7e115858575",
  "receipt": {
    "to": null,
    "from": "0x0Ae697c4761745bC8B5ea6a1f0aac36959586736",
    "contractAddress": "0x07Db19DB6016745f1822964C1988B15431C7E173",
    "transactionIndex": 1,
    "gasUsed": "1025958",
    "logsBloom": "0x
    "blockHash": "0x4f5bc869aeefa8b727e7052125d55310670225e3a1d6a36048b6ed740ea9feb0",
    "transactionHash": "0xa374d2b1a3c5163260f052b1f62ec79a802e265111cea8c0f4beb7e115858575",
    "logs": [],
    "blockNumber": 6569378,
    "cumulativeGasUsed": "1087798",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "3540a36711f5e71f64a24542645672de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Trist\\u00e1n Vaquero\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is a demo of a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport './PriceConverter.sol';\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Trist\\u00e1n Vaquero\\n * @notice This contract is a demo of a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // variables that wont change -> constant\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded; // s_ means its a storage variable (its going to consume a lot of GAS)\\n    address private immutable i_owner; // variables that we set one time outside of the same line that they are declared -> immutable\\n    AggregatorV3Interface private s_priceFeed; // global variable created and obtaining its value in the constructor so we dont have to hardcode the priceFeed and we can pass it dynamically.\\n\\n    // modifiers: key words that we can add at the function declaration to modify the functions with a functionality.\\n    // When we call a function with a modifer, we are saying: before executing the function, execute the code in the modifer\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, NotOwner()); // we want that only the owner of the contract is able to withdraw money; the metamask address of the person deploying the contract must be the same to the metamask address of the person withdrawing money.\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _; // do the function code. We can put it above to do first the function and then the modifier.\\n    }\\n\\n    // function that automatically is called when we deploy the contract -> like a normal constructor. Its called immediately after deploying the contract.\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender; // msg.sender = the person who is deploying the contract (address on metamask)\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // What happens if someone sends this contract ETH withput calling the fund function\\n    // The ETH sent to this contract will just go to the contract but we wouldnt have any track of those people\\n    // receive\\n    // fallback\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // contract addresses can hold funds too since every time we deploy a contract we get an address similar to a wallet.\\n    // payable = be able to access the value attribute when deploying the App\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        // We want to be able to set a minimum fund amount in USD (get the ETH price / 50 -> eth converter and put the 0.X in ETH -> copy the wei and put it on Value -> run fund\\n        // Send ETH to this contract:\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD,\\n            'ERROR: Didnt send enough ETH!'\\n        ); // the minimum value is 1 ETH (1e18 == 1 * 10 ^ 18 == 1 ETH in WEI). \\\"require\\\" is an \\\"if\\\". If the condition is not met, all the actions from before will be undone.\\n        s_funders.push(msg.sender); // msg.sender = address sending (keeping track of the donators donating to our contract)\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    // withdraw funds out of this contract so they can buy things for this project\\n    function withdraw() public onlyOwner {\\n        // require(msg.sender == owner, \\\"Sender is not the owner\\\"); // we want that only the owner of the contract is able to withdraw money; to avoid using require all the time, we can create a modifier\\n\\n        // reset funders because we are returning all the money from them\\n        for (\\n            uint256 fudnerIndex = 0;\\n            fudnerIndex < s_funders.length;\\n            fudnerIndex++\\n        ) {\\n            address funder = s_funders[fudnerIndex]; // get the funder\\n            s_addressToAmountFunded[funder] = 0; // reset funds\\n        }\\n\\n        // reset array of funders\\n        s_funders = new address[](0); // reset array with 0 objects/elements to start with\\n\\n        // withdraw funds\\n        // 3 ways:\\n\\n        // 1. transfer (if fails, throws an error and automatically reverts the transaction)\\n        // msg.sender = type address; payable(msg.sender) = payable address -> to be able to send the tokens\\n        // payable(msg.sender).transfer(address(this).balance); // payable(msg.sender) -> gets the address where we are going to send the money; address(this).balance -> amount we are going to transfer (this = contract)\\n\\n        // 2. send (doesent throw an error or revert the transaction. Returns a boolean if the transfer was successfull or not)\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\"); // check the transaction to revert it if it fails\\n\\n        // 3. call (recommended way. Allows to call any function)\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(''); // address(this) = contract ; .balance = balance of the contract\\n        require(callSuccess, 'Send failed');\\n    }\\n\\n    // withdraw function but more GAS efficient\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders; // we read once the funders array and store it in memory so we dont have to constantly read and waste GAS (mappings cannot be stored in memory)\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}('');\\n        require(success, 'Send failed');\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x4f1369171c21df5cc538c5503cf5608857175167b62368d5d9e53ab22f2c19e9\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {AggregatorV3Interface} from '@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol'; // import directly from GitHub the interface\\n\\nlibrary PriceConverter {\\n    // function to convert msg.value to the USD equivalent\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // ABI of the contract we want to interact with\\n        // Address of the contract we want to interact with: 0x694AA1769357215DE4FAC081bf1f309aDC325306 (https://docs.chain.link/data-feeds/price-feeds/addresses?network=ethereum&page=1)\\n        // AggregatorV3Interface give us the minimalistic ABI to interact with a contract\\n        (, int price, , , ) = priceFeed.latestRoundData(); // price = price of ETH in terms of USD (8 decimals -> 3000.00000000 -> We need 18 decimals to match msg.value); if the function returns more than one value and we are not going to use it, we can leave them blank\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // it has 18 zeros so we have to devide\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x7020721e5347e409fad38e9b4c69dc5a0ca1cd54058f8d0fa6baf94cd0c55511\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012b7380380620012b7833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611131620001866000396000818161033101528181610580015281816105d001526107c601526111316000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610abf565b6102e6565b6040516100cc9190610b05565b60405180910390f35b3480156100e157600080fd5b506100ea61032f565b005b3480156100f857600080fd5b5061010161056f565b60405161010e9190610b05565b60405180910390f35b34801561012357600080fd5b5061012c61057c565b6040516101399190610b2f565b60405180910390f35b34801561014e57600080fd5b506101576105a4565b6040516101649190610ba9565b60405180910390f35b6101756101be565b005b61017f6105ce565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bf0565b610892565b6040516101b59190610b2f565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d990919063ffffffff16565b1161023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023490610c7a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b4576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561045f5760008082815481106103d9576103d8610c9a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045790610cf8565b9150506103b7565b50600067ffffffffffffffff81111561047b5761047a610d41565b5b6040519080825280602002602001820160405280156104a95781602001602082028036833780820191505090505b50600090805190602001906104bf9291906109b5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e690610da1565b60006040518083038185875af1925050503d8060008114610523576040519150601f19603f3d011682016040523d82523d6000602084013e610528565b606091505b505090508061056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390610e02565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610653576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068c575b5050505050905060005b81518110156107615760008282815181106106fe576106fd610c9a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075990610cf8565b9150506106e0565b50600067ffffffffffffffff81111561077d5761077c610d41565b5b6040519080825280602002602001820160405280156107ab5781602001602082028036833780820191505090505b50600090805190602001906107c19291906109b5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080890610da1565b60006040518083038185875af1925050503d8060008114610845576040519150601f19603f3d011682016040523d82523d6000602084013e61084a565b606091505b505090508061088e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088590610e02565b60405180910390fd5b5050565b60008082815481106108a7576108a6610c9a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108e583610915565b90506000670de0b6b3a764000085836108fe9190610e22565b6109089190610eab565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095e57600080fd5b505afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109969190610f69565b5050509150506402540be400816109ad9190610fe4565b915050919050565b828054828255906000526020600020908101928215610a2e579160200282015b82811115610a2d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d5565b5b509050610a3b9190610a3f565b5090565b5b80821115610a58576000816000905550600101610a40565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8c82610a61565b9050919050565b610a9c81610a81565b8114610aa757600080fd5b50565b600081359050610ab981610a93565b92915050565b600060208284031215610ad557610ad4610a5c565b5b6000610ae384828501610aaa565b91505092915050565b6000819050919050565b610aff81610aec565b82525050565b6000602082019050610b1a6000830184610af6565b92915050565b610b2981610a81565b82525050565b6000602082019050610b446000830184610b20565b92915050565b6000819050919050565b6000610b6f610b6a610b6584610a61565b610b4a565b610a61565b9050919050565b6000610b8182610b54565b9050919050565b6000610b9382610b76565b9050919050565b610ba381610b88565b82525050565b6000602082019050610bbe6000830184610b9a565b92915050565b610bcd81610aec565b8114610bd857600080fd5b50565b600081359050610bea81610bc4565b92915050565b600060208284031215610c0657610c05610a5c565b5b6000610c1484828501610bdb565b91505092915050565b600082825260208201905092915050565b7f4552524f523a204469646e742073656e6420656e6f7567682045544821000000600082015250565b6000610c64601d83610c1d565b9150610c6f82610c2e565b602082019050919050565b60006020820190508181036000830152610c9381610c57565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0382610aec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3657610d35610cc9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d8b600083610d70565b9150610d9682610d7b565b600082019050919050565b6000610dac82610d7e565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dec600b83610c1d565b9150610df782610db6565b602082019050919050565b60006020820190508181036000830152610e1b81610ddf565b9050919050565b6000610e2d82610aec565b9150610e3883610aec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7157610e70610cc9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eb682610aec565b9150610ec183610aec565b925082610ed157610ed0610e7c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610efb81610edc565b8114610f0657600080fd5b50565b600081519050610f1881610ef2565b92915050565b6000819050919050565b610f3181610f1e565b8114610f3c57600080fd5b50565b600081519050610f4e81610f28565b92915050565b600081519050610f6381610bc4565b92915050565b600080600080600060a08688031215610f8557610f84610a5c565b5b6000610f9388828901610f09565b9550506020610fa488828901610f3f565b9450506040610fb588828901610f54565b9350506060610fc688828901610f54565b9250506080610fd788828901610f09565b9150509295509295909350565b6000610fef82610f1e565b9150610ffa83610f1e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103957611038610cc9565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561107657611075610cc9565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110b3576110b2610cc9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110f0576110ef610cc9565b5b82820290509291505056fea2646970667358221220942b08a7c52b265f8b7277d9f2728f394d11d15e16aa2a378a7fbfe6ee8a3a2d64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610abf565b6102e6565b6040516100cc9190610b05565b60405180910390f35b3480156100e157600080fd5b506100ea61032f565b005b3480156100f857600080fd5b5061010161056f565b60405161010e9190610b05565b60405180910390f35b34801561012357600080fd5b5061012c61057c565b6040516101399190610b2f565b60405180910390f35b34801561014e57600080fd5b506101576105a4565b6040516101649190610ba9565b60405180910390f35b6101756101be565b005b61017f6105ce565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bf0565b610892565b6040516101b59190610b2f565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d990919063ffffffff16565b1161023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023490610c7a565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b4576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561045f5760008082815481106103d9576103d8610c9a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045790610cf8565b9150506103b7565b50600067ffffffffffffffff81111561047b5761047a610d41565b5b6040519080825280602002602001820160405280156104a95781602001602082028036833780820191505090505b50600090805190602001906104bf9291906109b5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e690610da1565b60006040518083038185875af1925050503d8060008114610523576040519150601f19603f3d011682016040523d82523d6000602084013e610528565b606091505b505090508061056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390610e02565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610653576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068c575b5050505050905060005b81518110156107615760008282815181106106fe576106fd610c9a565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075990610cf8565b9150506106e0565b50600067ffffffffffffffff81111561077d5761077c610d41565b5b6040519080825280602002602001820160405280156107ab5781602001602082028036833780820191505090505b50600090805190602001906107c19291906109b5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080890610da1565b60006040518083038185875af1925050503d8060008114610845576040519150601f19603f3d011682016040523d82523d6000602084013e61084a565b606091505b505090508061088e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088590610e02565b60405180910390fd5b5050565b60008082815481106108a7576108a6610c9a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108e583610915565b90506000670de0b6b3a764000085836108fe9190610e22565b6109089190610eab565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095e57600080fd5b505afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109969190610f69565b5050509150506402540be400816109ad9190610fe4565b915050919050565b828054828255906000526020600020908101928215610a2e579160200282015b82811115610a2d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d5565b5b509050610a3b9190610a3f565b5090565b5b80821115610a58576000816000905550600101610a40565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8c82610a61565b9050919050565b610a9c81610a81565b8114610aa757600080fd5b50565b600081359050610ab981610a93565b92915050565b600060208284031215610ad557610ad4610a5c565b5b6000610ae384828501610aaa565b91505092915050565b6000819050919050565b610aff81610aec565b82525050565b6000602082019050610b1a6000830184610af6565b92915050565b610b2981610a81565b82525050565b6000602082019050610b446000830184610b20565b92915050565b6000819050919050565b6000610b6f610b6a610b6584610a61565b610b4a565b610a61565b9050919050565b6000610b8182610b54565b9050919050565b6000610b9382610b76565b9050919050565b610ba381610b88565b82525050565b6000602082019050610bbe6000830184610b9a565b92915050565b610bcd81610aec565b8114610bd857600080fd5b50565b600081359050610bea81610bc4565b92915050565b600060208284031215610c0657610c05610a5c565b5b6000610c1484828501610bdb565b91505092915050565b600082825260208201905092915050565b7f4552524f523a204469646e742073656e6420656e6f7567682045544821000000600082015250565b6000610c64601d83610c1d565b9150610c6f82610c2e565b602082019050919050565b60006020820190508181036000830152610c9381610c57565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0382610aec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3657610d35610cc9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d8b600083610d70565b9150610d9682610d7b565b600082019050919050565b6000610dac82610d7e565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dec600b83610c1d565b9150610df782610db6565b602082019050919050565b60006020820190508181036000830152610e1b81610ddf565b9050919050565b6000610e2d82610aec565b9150610e3883610aec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7157610e70610cc9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eb682610aec565b9150610ec183610aec565b925082610ed157610ed0610e7c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610efb81610edc565b8114610f0657600080fd5b50565b600081519050610f1881610ef2565b92915050565b6000819050919050565b610f3181610f1e565b8114610f3c57600080fd5b50565b600081519050610f4e81610f28565b92915050565b600081519050610f6381610bc4565b92915050565b600080600080600060a08688031215610f8557610f84610a5c565b5b6000610f9388828901610f09565b9550506020610fa488828901610f3f565b9450506040610fb588828901610f54565b9350506060610fc688828901610f54565b9250506080610fd788828901610f09565b9150509295509295909350565b6000610fef82610f1e565b9150610ffa83610f1e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103957611038610cc9565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561107657611075610cc9565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110b3576110b2610cc9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110f0576110ef610cc9565b5b82820290509291505056fea2646970667358221220942b08a7c52b265f8b7277d9f2728f394d11d15e16aa2a378a7fbfe6ee8a3a2d64736f6c63430008080033",
  "devdoc": {
    "author": "Tristán Vaquero",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is a demo of a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}